/* remaining issue:
- no more than 2^32 sequences to glue together (should be ok for spruce)
*/
#include <atomic>
#include "unionFind.hpp"
#include "ThreadPool.h"
#include <BooPHF/BooPHF.h>
#include <ctime> // for time
#include <iostream> // for time (and maybe other things?)

class bglue : public Tool
{
public:
    bglue() : Tool ("bglue"){
	getParser()->push_back (new OptionOneParam ("-k", "kmer size",  false,"31"));
	getParser()->push_back (new OptionOneParam ("-in", "input file",  true)); // necessary for repartitor
	getParser()->push_back (new OptionOneParam ("-out", "output file",  false, "out.fa"));
	getParser()->push_front (new OptionNoParam  ("--only-uf",   "(for debugging only) stop after UF construction", false));
	getParser()->push_front (new OptionNoParam  ("--uf-stats",   "display UF statistics", false));
	getParser()->push_back (new OptionOneParam ("--nb-glue-partitions", "number of glue files on disk",  false,"200"));
    };

    // Actual job done by the tool is here
    void execute ();
};


/* main */
void bglue::execute (){

    int nb_threads = getInput()->getInt("-nb-cores");
    std::cout << "Nb threads: " << nb_threads <<endl;
    kmerSize=getInput()->getInt("-k");
    nbGluePartitions=getInput()->getInt("--nb-glue-partitions");
    size_t k = kmerSize;
    string inputFile(getInput()->getStr("-in")); // necessary for repartitor

    string h5_prefix = inputFile.substr(0,inputFile.size()-2);
    IBank *in = Bank::open (h5_prefix + "glue");


    Storage* storage = StorageFactory(STORAGE_HDF5).load ( inputFile.c_str() );
    LOCAL (storage);


    // TODO would need to call bglue function
}

int main (int argc, char* argv[])
{
    try
    {
        bglue().run (argc, argv);
    }
    catch (Exception& e)
    {
        std::cout << "EXCEPTION: " << e.getMessage() << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
