/*****************************************************************************
 *   GATB : Genome Assembly Tool Box                                         *
 *   Copyright (c) 2013                                                      *
 *                                                                           *
 *   GATB is free software; you can redistribute it and/or modify it under   *
 *   the CECILL version 2 License, that is compatible with the GNU General   *
 *   Public License                                                          *
 *                                                                           *
 *   This program is distributed in the hope that it will be useful,         *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            *
 *   CECILL version 2 License for more details.                              *
 *****************************************************************************/

/**\page snippets_page How to use the library ?
 *
 * \subpage compilation         \n
 * \subpage snippets_iterators  \n
 * \subpage snippets_bank       \n
 * \subpage snippets_kmer       \n
 *
 * ************************************************************************************
 * \page compilation Compilation instructions
 *
 ************************************************************************************
 * \section compilation_library Compiling the library (and other artifacts)
 *
 * The gatb::core library is generated by the cmake tool.
 *
 * In the following, we will call GATB the main directory of the gatb core project (ie.
 * the root directory of the source archive).
 *
 * You have then to do the following:
 *
 * \code
 * cd GATB; mkdir build ; cd build ; cmake .. ; make
 * \endcode
 *
 * Several artifacts are generated:
 *
 *  - the gatb core library is available in the generated <tt>build/lib</tt> directory
 *  - the HTML documentation is available from <tt>build/doc/html/index.html</tt>
 *  - the unit tests binary is available in <tt>build/test/GatbToolsTest</tt>
 *
 * About the unit tests binary, you can launch it with
 * \code
 * build/test/GatbToolsTest out.xml
 * \endcode
 * If you don't specify an output file name, you will get no console output,
 * but you will be able to use the exit status code of the command (useful for automatization processes).
 *
 ************************************************************************************
 * \section compilation_snippets Compiling the snippets
 *
 * A directory named 'examples' holds some snippets that show how to use services provided by the library.
 *
 * In order to compile them, you will first need to compile the library.
 *
 * Then, you can use the following command for compiling one snippet:
 * \code
 * g++ GATB/examples/snippetX.cpp -I GATB/src GATB/build/lib/libGatbTools.a -lz
 * \endcode
 *
 * where the GATB environment variable should point to the GATB core directory and where snippetX.cpp is
 * one of the provided snippets.
 * \n
 *
 ************************************************************************************
 ************************************************************************************
 *
 * \page snippets_iterators Iterators snippets
 *
 ************************************************************************************
 * \section snippets_iterators_snippet1 Iterate a list
 *
 * This snippet shows how to iterate a STL list with our iterator design.
 *
 *\snippet iterators1.cpp  snippet1
 *
 ************************************************************************************
 * \section snippets_iterators_snippet2 Iterate the Cartesian product of two lists
 *
 * This snippet shows how to iterate the Cartesian product of two lists:
 *
 *  1) Declare two iterators \n
 *  2) Declare one Cartesian iterator configured with the two iterators \n
 *  3) Iterate the Cartesian iterator. \n
 *
 * The current item of the iteration is a pair, so one should retrieve the couple of
 * values with methods 'first' and 'second'.
 *
 *\snippet iterators2.cpp  snippet1
 *
 ************************************************************************************
 * \section snippets_iterators_snippet3 Truncating an iteration
 *
 * This snippet shows how to truncate the iteration of some iterator.
 *
 *\snippet iterators3.cpp  snippet1
 *
 *
 ************************************************************************************
 * \section snippets_iterators_snippet4 Iterate a list with progress feedback
 *
 * This snippet shows how to iterate a STL list and being notified as a listener about
 * its progression.
 *
 * The idea is to use a SubjectIterator instance that refers the actual iterator we want
 * to iterate.
 *
 * Then, it is possible to subscribe some callback function (here as a functor) to the
 * SubjectIterator instance.
 *
 * The listener will then receive at regular interval the number of currently iterated
 * items.
 *
 *\snippet iterators4.cpp  snippet1
 *
 ************************************************************************************
 * \section snippets_iterators_snippet5 Iterate a list and filter out some items
 *
 * This snippet shows how to iterate a STL list while filtering out some items that
 * don't check some condition.
 *
 *\snippet iterators5.cpp  snippet1
 *
 *
 ************************************************************************************
 ************************************************************************************
 *
 * \page snippets_bank Bank snippets
 *
 ************************************************************************************
 * \section snippets_bank_snippet1 Parsing a single FASTA bank without checks
 *
 * This snippet shows how to read one FASTA bank in a simple way. No check is done about
 * the correctness of the FASTA bank file path.
 *
 * Some information of each iterated sequence are diplayed as output.
 *
 *\snippet bank1.cpp  snippet1
 *
 ************************************************************************************
 * \section snippets_bank_snippet2 Parsing several FASTA banks
 *
 * This snippet shows how to read one ore more FASTA banks in a simple way.
 * A check is done about the correctness of the FASTA bank file path.
 *
 * Some information of each iterated sequence are diplayed as output.
 *
 *\snippet bank2.cpp  snippet1
 *
 *************************************************************************************
 * \section snippets_bank_snippet3 Parsing a FASTA bank in a different way
 *
 * This snippet shows how to read one or more FASTA banks in a "push" model;
 * it means that the sequence iterator calls some function for each sequence.
 *
 * This is another way to iterate items and opposite to the "pull" model where the
 * iterator is called to provide the current item, instead of calling some function to
 * do as we do in this sample.
 *
 *\snippet bank3.cpp  snippet1
 *
 **************************************************************************************
 * \section snippets_bank_snippet4 Parsing a FASTA bank and getting progress information
 *
 * This snippet shows how to create an iterator on something (here sequences from a FASTA
 * file) and encapsulate it with another iterator that adds the possibility to notify some
 * listener every 10 iterated sequences (used here for showing some progression during the
 * iteration).
 *
 * Note: the "notifying" iterator is generic and could be reused to send progress notification
 * with any kind of iterator, not only on sequences.
 *
 *\snippet bank4.cpp  snippet1
 *
 **************************************************************************************
 * \section snippets_bank_snippet5 Parsing a FASTA bank and getting percentage progress information
 *
 * This snippet shows how to read one or more FASTA banks and get a percentage progress
 * information during the iteration.
 *
 * In order to get a percentage, we need to know the number of sequences in the bank to be
 * parsed. We get an estimation of this number with the estimateNbSequences() method
 * and configure our progression functor accordingly.
 *
 *\snippet bank5.cpp  snippet1
 *
 * \n
 *
 **************************************************************************************
 * \section snippets_bank_snippet6 Output a FASTA file with data line of given size
 *
 * This snippet provides a small utility for cutting lines of data with a given size.
 *
 *\snippet bank6.cpp  snippet1
 *
 * \n
 *
 **************************************************************************************
 * \section snippets_bank_snippet7 Filter sequences with a given data size
 *
 * This snippet shows how to parse a bank with a functor used to filter out some items.
 *
 *\snippet bank7.cpp  snippet1
 *
 * \n
 *
 **************************************************************************************
 * \section snippets_bank_snippet8 Conversion of a FASTA bank to a binary format
 *
 * This snippet shows how to parse a nucleic bank and convert it to a binary format.
 *
 *\snippet bank8.cpp  snippet1
 *
 * \n
 *
 ************************************************************************************
 ************************************************************************************
 *
 * \page snippets_kmer Kmer snippets
 *
 ************************************************************************************
 * \section snippets_kmer_snippet1 Using a kmer model
 *
 * This snippet shows how to create kmer models.
 *
 * We use different integer types for holding kmer values. For instance, we can use:
 *  - native integers (like u_int64_t)
 *  - integers supporting huge values (ttmath::Uint for instance)
 *
 *\snippet kmer1.cpp  snippet1
 * \n
 *
 ************************************************************************************
 * \section snippets_kmer_snippet2 Computing kmers with a model
 *
 * This snippet shows how to get kmers from a model.
 *
 *\snippet kmer2.cpp  snippet1
 * \n
 *
 ************************************************************************************
 * \section snippets_kmer_snippet3 Iterating kmers from a sequence
 *
 * This snippet shows how to iterate the kmers from a sequence, for a given model.
 *
 *\snippet kmer3.cpp  snippet1
 * \n
 *
 ************************************************************************************
 * \section snippets_kmer_snippet4 Iterating kmers from one or several banks
 *
 * This snippet shows how to iterate the kmers from banks. In particular, we use two
 * iterators and two loops:
 *      - outer loop on sequences of the bank
 *      - inner loop on kmer on the current sequence from the outer loop
 *
 *\snippet kmer4.cpp  snippet1
 * \n
 *
 ************************************************************************************
 * \section snippets_kmer_snippet5 Iterating kmers from one or several banks with progress information
 *
 * This snippet shows how to iterate the kmers from banks.
 *
 * It shows how to use a single compound iterator that is equivalent to two iterators (one inner, one outer).
 *
 * Although this is a kmer iterator, we add a progress listener on the outer sequences iteration.
 *
 * This snippet is rather complex but shows how we can develop few material (basically bank and kmer iterators)
 * and get in return several advantages through the iterator helpers.
 *
 *\snippet kmer5.cpp  snippet1
 * \n
 *
 ************************************************************************************
 * \section snippets_kmer_snippet6 Comparing kmers from a FASTA bank and a binary bank
 *
 * This snippet shows that kmers from a FASTA bank or a binary bank are the same.
 *
 *\snippet kmer6.cpp  snippet1
 * \n
 *
 ************************************************************************************
 *
 * \page snippets_system Operating System snippets
 *
 ************************************************************************************
 * \section snippets_system_snippet1 to be done
 *
 * \n
 */
